#!/bin/bash

#when set to exit, mpd_control will exit if you press escape
#when set to break, mpd_control will go the upper level if possible
ESC_ACTION="exit"
# source configuration file for rofi if exists

PORT="6600"

CURRENT=$(mpc -p $PORT current)
[[ -n $CURRENT ]] || CURRENT="Stopped"
ROFI="rofi -dmenu -p 'Search:' -mesg $CURRENT"

addaftercurrent(){
	
	#playlist is empty, just add the song
	if [ "$(mpc -p $PORT playlist | wc -l)" == "0" ]; then
		mpc -p $PORT add "$1" 

	#there is no current song so mpd is stopped
	#it seems to be impossible to determine the current songs' position when 
	#mpd is stopped, so just add to the end
	elif [ -z "$(mpc -p $PORT current)" ]; then 
		mpc -p $PORT play
		CUR_POS=$(mpc -p $PORT  | tail -2 | head -1 | awk '{print $2}' | sed 's/#//' | awk -F/ '{print $1}')
		END_POS=$(mpc -p $PORT playlist | wc -l)
		mpc -p $PORT add "$1"
		mpc -p $PORT move $(($END_POS+1)) $(($CUR_POS+1))	
		mpc -p $PORT stop

	#at least 1 song is in the playlist, determine the position of the 
	#currently played song and add $1 after it
	else

		CUR_POS=$(mpc -p $PORT  | tail -2 | head -1 | awk '{print $2}' | sed 's/#//' | awk -F/ '{print $1}')
		END_POS=$(mpc -p $PORT playlist | wc -l)
		mpc -p $PORT add "$1"
		mpc -p $PORT move $(($END_POS+1)) $(($CUR_POS+1))	
	fi
}
addaftercurrentandplay(){

	#playlist is empty, just add the song
	if [ "$(mpc -p $PORT playlist | wc -l)" == "0" ]; then
		mpc -p $PORT add "$1" 
		mpc -p $PORT play

	#there is no current song so mpd is stopped
	#it seems to be impossible to determine the current songs' position when 
	#mpd is stopped, so just add to the end
	elif [ -z "$(mpc -p $PORT current)" ]; then 
		mpc -p $PORT play
		CUR_POS=$(mpc -p $PORT  | tail -2 | head -1 | awk '{print $2}' | sed 's/#//' | awk -F/ '{print $1}')
		END_POS=$(mpc -p $PORT playlist | wc -l)
		mpc -p $PORT add "$1"
		mpc -p $PORT move $(($END_POS+1)) $(($CUR_POS+1))	
		mpc -p $PORT play $(($CUR_POS+1))

	#at least 1 song is in the playlist, determine the position of the 
	#currently played song and add $1 after it
	else

		CUR_POS=$(mpc -p $PORT | tail -2 | head -1 | awk '{print $2}' | sed 's/#//' | awk -F/ '{print $1}')
		END_POS=$(mpc -p $PORT playlist | wc -l)
		mpc -p $PORT add "$1"
		mpc -p $PORT move $(($END_POS+1)) $(($CUR_POS+1))	
		mpc -p $PORT play $(($CUR_POS+1))
	fi
}

browsedirectory()
{
    local CUR_DIR=$1
    unset PARENT
    [[ $CUR_DIR =~ "/" ]] && local PARENT=${CUR_DIR%/*}

    while true; do

        local SUBDIR=$(mpc -p $PORT ls "$CUR_DIR")
        local SELECT=$(echo -e "replace all\nadd all\n--------------------------\n...\n$SUBDIR" | $ROFI);

        if [ "$SELECT" = "" ]; then $ESC_ACTION
        elif [ "$SELECT" = "replace all" ]; then
            CUR_SONG=$(mpc -p $PORT current)
            mpc -p $PORT clear;
            mpc -p $PORT ls "$CUR_DIR" | mpc -p $PORT add;
            if [ -n "$CUR_SONG" ]; then mpc -p $PORT play; fi
            $ESC_ACTION
        elif [ "$SELECT" = "add all" ]; then
            mpc -p $PORT ls "$CUR_DIR" | mpc -p $PORT add;
            $ESC_ACTION
        elif [ "$SELECT" = "..." ]; then
            if [ -n "$PARENT" ]; then
                browsedirectory "$PARENT"
            else
                DIRECTORY=$(mpc -p $PORT ls | sort -f | $ROFI);
                if [ "$DIRECTORY" = "" ]; then $ESC_ACTION;
                fi

                browsedirectory "$DIRECTORY"
            fi
            break
        fi

        browsedirectory "$SELECT"
    done
}

case $1 in
	
	-a|--artist)
	
	while true; do

		ARTIST="$(mpc -p $PORT list artist | sort -f | $ROFI)";
		if [ "$ARTIST" = "" ]; then $ESC_ACTION; fi
		
		while true; do

			ALBUMS=$(mpc -p $PORT list album artist "$ARTIST" | sort -f);
			ALBUM=$(echo -e "replace all\nadd all\n--------------------------\n$ALBUMS" | $ROFI);
			if [ "$ALBUM" = "" ]; then $ESC_ACTION;
			
			elif [ "$ALBUM" = "replace all" ]; then
				CUR_SONG=$(mpc -p $PORT current)
				mpc -p $PORT clear
				mpc -p $PORT find artist "$ARTIST" | mpc -p $PORT add 
				if [ -n "$CUR_SONG" ]; then mpc -p $PORT  play; fi
				$ESC_ACTION
			elif [ "$ALBUM" = "add all" ]; then 
				mpc -p $PORT find artist "$ARTIST" | mpc -p $PORT add
				$ESC_ACTION
			fi
			
			while true; do
				
				TITLES=$(mpc -p $PORT list title artist "$ARTIST" album "$ALBUM")
				TITLE=$(echo -e "replace all\nadd all\n--------------------------\n$TITLES" | $ROFI);
				if [ "$TITLE" = "" ]; then $ESC_ACTION
				elif [ "$TITLE" = "replace all" ]; then
					CUR_SONG=$(mpc -p $PORT current)
					mpc -p $PORT clear;
					mpc -p $PORT find artist "$ARTIST" album "$ALBUM" | mpc -p $PORT add 
					if [ -n "$CUR_SONG" ]; then mpc -p $PORT play; fi
					$ESC_ACTION
				elif [ "$TITLE" = "add all" ]; then
					mpc -p $PORT find artist "$ARTIST" album "$ALBUM" | mpc -p $PORT add 
					$ESC_ACTION
				
				fi

				while true; do
					DEC=$(echo -e "add after current and play\nadd after current\nreplace\nadd at the end" | $ROFI);
					case $DEC in 

						"")
						$ESC_ACTION
						;;

						"add after current and play")
						addaftercurrentandplay "$(mpc -p $PORT find artist "$ARTIST" album "$ALBUM" title "$TITLE" | head -1 )"
						;;

						"add after current")
						addaftercurrent "$(mpc -p $PORT find artist "$ARTIST" album "$ALBUM" title "$TITLE" | head -1 )"
						;;

						"replace")
						CUR_SONG=$(mpc -p $PORT current)
						mpc -p $PORT clear
						mpc -p $PORT find artist "$ARTIST" album "$ALBUM" title "$TITLE" | head -1 | mpc -p $PORT add
						if [ -n "$CUR_SONG" ]; then mpc -p $PORT play; fi
						;;
						
						"add at the end")
						mpc -p $PORT find artist "$ARTIST" album "$ALBUM" title "$TITLE" | head -1 | mpc -p $PORT add
						;;

					esac
					$ESC_ACTION
				done
			done
		done
	done
	;;

	-t|--track)
		
	TITLE=$(mpc -p $PORT list title | sort -f | $ROFI)
	if [ "$TITLE" = "" ]; then exit; fi
	
	SONG=$(mpc -p $PORT find title "$TITLE" | head -1) 
	addaftercurrentandplay "$SONG"
	;;

	-p|--playlist)
	PLAYLIST=$(mpc -p $PORT lsplaylists | $ROFI);
	if [ "$PLAYLIST" = "" ]; then exit; fi
	CUR_SONG=$(mpc -p $PORT current)
	mpc -p $PORT clear
	mpc -p $PORT load "$PLAYLIST";
	if [ -n "$CUR_SONG" ]; then mpc -p $PORT play; fi
	;;

	-j|--jump)
	
	TITLE=$(mpc -p $PORT playlist | $ROFI);
	if [ "$TITLE" = "" ]; then exit; fi
	POS=$(mpc -p $PORT playlist | grep -n "$TITLE" | awk -F: '{print $1}')
	mpc -p $PORT play $POS;
	;;

	-l|--longplayer)
	
	while true; do

		ALBUM=$(mpc -p $PORT list album | sort -f | $ROFI);
		if [ "$ALBUM" = "" ]; then $ESC_ACTION;
		fi
		
		while true; do
			
			TITLES=$(mpc -p $PORT list title album "$ALBUM")
			TITLE=$(echo -e "replace all\nadd all\n--------------------------\n$TITLES" | $ROFI);
			if [ "$TITLE" = "" ]; then $ESC_ACTION
			elif [ "$TITLE" = "replace all" ]; then
				CUR_SONG=$(mpc -p $PORT current)
				mpc -p $PORT clear;
				mpc -p $PORT find album "$ALBUM" | mpc -p $PORT add 
				if [ -n "$CUR_SONG" ]; then mpc -p $PORT play; fi
				$ESC_ACTION
			elif [ "$TITLE" = "add all" ]; then
				mpc -p $PORT find album "$ALBUM" | mpc -p $PORT add 
				$ESC_ACTION
			
			fi

			while true; do
				DEC=$(echo -e "add after current and play\nadd after current\nreplace\nadd at the end" | $ROFI);
				case $DEC in 

					"")
					$ESC_ACTION
					;;

					"add after current and play")
					addaftercurrentandplay "$(mpc -p $PORT find album "$ALBUM" title "$TITLE" | head -1 )"
					;;

					"add after current")
					addaftercurrent "$(mpc -p $PORT find album "$ALBUM" title "$TITLE" | head -1 )"
					;;

					"replace")
					CUR_SONG=$(mpc -p $PORT current)
					mpc -p $PORT clear
					mpc -p $PORT find album "$ALBUM" title "$TITLE" | head -1 | mpc -p $PORT add
					if [ -n "$CUR_SONG" ]; then mpc -p $PORT play; fi
					;;
					
					"add at the end")
					mpc -p $PORT find album "$ALBUM" title "$TITLE" | head -1 | mpc -p $PORT add
					;;

				esac
				$ESC_ACTION
			done
		done
	done
	;;

	-d|--directory)
	
	while true; do

		DIRECTORY=$(mpc -p $PORT ls | sort -f | $ROFI);
		if [ "$DIRECTORY" = "" ]; then $ESC_ACTION;
		fi

        browsedirectory "$DIRECTORY"
		
	done
	;;

	-c|--control)
	
	while true; do

        RAND=$(mpc | tail -1 | head -1 | sed 's/: /:/g' | awk -F' ' '{print $3}' | sed 's/^../\u&/')
        REPEAT=$(mpc | tail -1 | head -1 | sed 's/: /:/g' | awk -F' ' '{print $2}' | sed 's/^../\u&/')
        SINGLE=$(mpc | tail -1 | head -1 | sed 's/: /:/g' | awk -F' ' '{print $4}' | sed 's/^../\u&/')
        CONTROL=$(echo -e "Play/Pause\nNext\nPrev\nStop\n$RAND\n$REPEAT\n$SINGLE" | $ROFI);
        case $CONTROL in 

            "")
            $ESC_ACTION
            ;;

            Play/Pause)
                mpc -p $PORT toggle
            ;;

            Next)
                mpc -p $PORT next
            ;;

            Prev)
                mpc -p $PORT prev
            ;;

            Stop)
                mpc -p $PORT stop 
            ;;
            Random*)
                mpc -p $PORT random
            ;;
            Single*)
                mpc -p $PORT single
            ;;
            Repeat*)
                mpc -p $PORT repeat
            ;;

        esac
        $ESC_ACTION
	done
	;;

	-h|--help)
	echo "-a, --artist      search for artist, then album, then title"
    echo "-t, --track       search for a single track in the whole database"
	echo "-p, --playlist    search for a playlist load it"
	echo "-j, --jump        jump to another song in the current playlist"		 
	echo "-l, --longplayer  search for album, then title"
	echo "-d, --directory   browse the music directory"
	echo "-c, --control     control"
	
	
	
	
	;;
	
	*)
	echo "Usage: rofi-mpd [OPTION]"
	echo "Try 'rofi-mpd --help' for more information."
	;;

esac
